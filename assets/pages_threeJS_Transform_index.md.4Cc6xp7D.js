import{_ as i,c as a,o as e,V as o}from"./chunks/framework.V-t2EA2A.js";const t="/3d-summary-notes/assets/projection.wxoVe4oV.png",u=JSON.parse('{"title":"变换","description":"","frontmatter":{},"headers":[],"relativePath":"pages/threeJS/Transform/index.md","filePath":"pages/threeJS/Transform/index.md"}'),s={name:"pages/threeJS/Transform/index.md"},n=o('<h1 id="变换" tabindex="-1">变换 <a class="header-anchor" href="#变换" aria-label="Permalink to &quot;变换&quot;">​</a></h1><blockquote><p>图形学中的变换主要包含：视图变换（View Transformation）和投影变换（Projection Transformation）</p></blockquote><ul><li><p>视图变换是指从世界坐标系到相机坐标系的变换过程。视图变换是为了模拟相机在三维空间中的位置和方向，并决定了观察者在场景中看到的视图。通过视图变换，可以实现相机的移动、旋转和缩放等操作，以改变观察者的视角和观察到的场景。</p></li><li><p>投影变换是指将相机坐标系中的三维点投影到二维屏幕空间的过程。投影变换可以使用正交投影或透视投影来实现。</p></li><li><p>区别：视图变换主要关注相机位置和方向的变换，以及观察者的视角；而投影变换主要关注将三维点从相机坐标系投影到二维屏幕坐标系的过程，考虑透视效果和投影方式的影响。</p></li></ul><h2 id="齐次坐标-homogeneous-coordinates" tabindex="-1">齐次坐标（Homogeneous Coordinates） <a class="header-anchor" href="#齐次坐标-homogeneous-coordinates" aria-label="Permalink to &quot;齐次坐标（Homogeneous Coordinates）&quot;">​</a></h2><blockquote><p>齐次坐标没那么复杂，通过引入额外的维度（w-coordinate），让平移也能像旋转和缩放一样写成 <code>3 x 3</code> 的矩阵。</p></blockquote><ul><li>笛卡尔坐标系中，平移不是线性变换，不能写入矩阵中：</li></ul><p>$$\\begin{bmatrix} x_a\\ y_a\\ \\end{bmatrix}$$ = $$\\begin{bmatrix} a &amp; b\\ c &amp; d\\ \\end{bmatrix}$$ · $$\\begin{bmatrix} x\\ y\\ \\end{bmatrix}$$ + $$\\begin{bmatrix} t_x\\ t_y\\ \\end{bmatrix}$$</p><ul><li>使用其次坐标：</li></ul><p>$$\\begin{bmatrix} x_a\\ y_a\\ 1\\ \\end{bmatrix}$$ = $$\\begin{bmatrix} a &amp; b &amp; t_x\\ c &amp; d &amp; t_y\\ 0 &amp; 0 &amp; 1\\ \\end{bmatrix}$$ · $$\\begin{bmatrix} x\\ y\\ 1\\ \\end{bmatrix}$$</p><blockquote><p>w 为1时，表示点；w 为0时，表示向量:</p></blockquote><ul><li><p>2D point = $$\\begin{bmatrix} x\\ y\\ 1\\ \\end{bmatrix}$$</p></li><li><p>2D vector = $$\\begin{bmatrix} x\\ y\\ 0\\ \\end{bmatrix}$$</p></li></ul><blockquote><p>在齐次坐标中，对 w 坐标的理解：</p></blockquote><ul><li>vector + vector = vector</li><li>point – point = vector</li><li>point + vector = point</li><li>point + point = ?? （取中点）</li></ul><h2 id="_2d-变换矩阵-2d-transformation-matrices" tabindex="-1">2D 变换矩阵（2D Transformation Matrices） <a class="header-anchor" href="#_2d-变换矩阵-2d-transformation-matrices" aria-label="Permalink to &quot;2D 变换矩阵（2D Transformation Matrices）&quot;">​</a></h2><blockquote><p>2D 变换矩阵中，平移和旋转都很简单，不好推导的是旋转矩阵</p></blockquote><p>R(α) = $$\\begin{bmatrix} cosα &amp; -sinα &amp; 0\\ sinα &amp; cosα &amp; 0\\ 0 &amp; 0 &amp; 1\\ \\end{bmatrix}$$</p><blockquote><p>组合变换（S1：缩放；T2：平移；R3：旋转），类似 <code>js</code> 中的 <code>compose</code> 函数。</p></blockquote><p>R3(T2(S1(X))) = R3 · T2 · S1 · $$\\begin{bmatrix} x\\ y\\ 1\\ \\end{bmatrix}$$</p><h2 id="视图变换-view-transformation" tabindex="-1">视图变换（View Transformation） <a class="header-anchor" href="#视图变换-view-transformation" aria-label="Permalink to &quot;视图变换（View Transformation）&quot;">​</a></h2><blockquote><p>视图变换只涉及到平移和旋转：</p></blockquote><ol><li><p>将相机的位置旋转到坐标原点；</p></li><li><p>将相机向上的方向旋转到 Y 方向；</p></li><li><p>将相机看向的方向旋转到 -Z 方向；</p></li></ol><blockquote><p>如果相机的位置默认就在坐标原点，向上方向为 Y 方向，并且看向的方向是 -Z 方向，那么视图矩阵就是一个单位矩阵。</p></blockquote><h2 id="投影变换-projection-transformation" tabindex="-1">投影变换（Projection Transformation） <a class="header-anchor" href="#投影变换-projection-transformation" aria-label="Permalink to &quot;投影变换（Projection Transformation）&quot;">​</a></h2><blockquote><p>投影变换是指将相机坐标系中的三维点投影到二维屏幕空间的过程</p></blockquote><p><img src="'+t+`" alt="z-buffer code"></p><h3 id="正交投影-orthographic-projection" tabindex="-1">正交投影（Orthographic Projection） <a class="header-anchor" href="#正交投影-orthographic-projection" aria-label="Permalink to &quot;正交投影（Orthographic Projection）&quot;">​</a></h3><blockquote><p>正交投影只涉及到平移和缩放：</p></blockquote><ol><li><p>将中心平移到坐标原点；</p></li><li><p>缩放到标准立方体(canonical cube)：[-1, 1]^3</p></li></ol><h3 id="透视投影-perspective-projection" tabindex="-1">透视投影（Perspective Projection） <a class="header-anchor" href="#透视投影-perspective-projection" aria-label="Permalink to &quot;透视投影（Perspective Projection）&quot;">​</a></h3><blockquote><p>在正交投影的基础上，再乘以一个新的矩阵，从而实现近大远小的效果，这个矩阵推导有点复杂。</p></blockquote><h2 id="three-js-中的视图矩阵和投影矩阵" tabindex="-1"><code>THREE.JS</code> 中的视图矩阵和投影矩阵 <a class="header-anchor" href="#three-js-中的视图矩阵和投影矩阵" aria-label="Permalink to &quot;\`THREE.JS\` 中的视图矩阵和投影矩阵&quot;">​</a></h2><blockquote><p>在 <code>THREE.JS</code> 中，视图矩阵和投影矩阵都被封装到 <code>camera</code> 中。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> viewMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera.matrixWorldInverse;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> projectionMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> camera.projectionMatrix;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;View Matrix:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, viewMatrix);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Projection Matrix:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, projectionMatrix);</span></span></code></pre></div>`,33),r=[n];function l(p,c,h,d,k,m){return e(),a("div",null,r)}const x=i(s,[["render",l]]);export{u as __pageData,x as default};
