import{_ as s,c as i,o as a,V as e}from"./chunks/framework.V-t2EA2A.js";const g=JSON.parse('{"title":"webGL 上下文丢失","description":"","frontmatter":{},"headers":[],"relativePath":"pages/smartCity/webGLContext/index.md","filePath":"pages/smartCity/webGLContext/index.md"}'),n={name:"pages/smartCity/webGLContext/index.md"},l=e(`<h1 id="webgl-上下文丢失" tabindex="-1">webGL 上下文丢失 <a class="header-anchor" href="#webgl-上下文丢失" aria-label="Permalink to &quot;webGL 上下文丢失&quot;">​</a></h1><h2 id="问题特征" tabindex="-1">问题特征 <a class="header-anchor" href="#问题特征" aria-label="Permalink to &quot;问题特征&quot;">​</a></h2><blockquote><p>网页 3D 部分的背景色是白色，非 3D 部分的 DOM 元素能正常显示。</p></blockquote><h2 id="问题报错-原因以及出现的场景" tabindex="-1">问题报错，原因以及出现的场景 <a class="header-anchor" href="#问题报错-原因以及出现的场景" aria-label="Permalink to &quot;问题报错，原因以及出现的场景&quot;">​</a></h2><h3 id="问题1-浏览器对-webgl-上下文个数的限制-google-16" tabindex="-1">问题1：浏览器对 webGL 上下文个数的限制（google: 16） <a class="header-anchor" href="#问题1-浏览器对-webgl-上下文个数的限制-google-16" aria-label="Permalink to &quot;问题1：浏览器对 webGL 上下文个数的限制（google: 16）&quot;">​</a></h3><ul><li><p>问题报错：<code>WARNING: Too many active WebGL contexts. Oldest context will be lost.</code></p></li><li><p>原因分析：浏览器同时支持的 WebGL context 个数是有限的，默认是16个。当超出时，会丢失之前创建的对象。</p></li><li><p>出现的场景：</p><ul><li><p>通过 <code>v-if</code> 方式切换显示隐藏 3D 场景，或者 <code>v-if</code> 的判断字段与 3D 场景组件相关</p></li><li><p>路由页面跳转，但是没有主动销毁 3D 相关对象和内存释放</p></li></ul></li></ul><h3 id="问题2-计算机进入休眠状态-导致-webgl-上下文数据丢失" tabindex="-1">问题2：计算机进入休眠状态，导致 webGL 上下文数据丢失 <a class="header-anchor" href="#问题2-计算机进入休眠状态-导致-webgl-上下文数据丢失" aria-label="Permalink to &quot;问题2：计算机进入休眠状态，导致 webGL 上下文数据丢失&quot;">​</a></h3><ul><li><p>问题报错：</p><ul><li><p><code>WebGL error CONTEXT_LOST_WEBGL in uniformMatrix4fv([object WebGLUniformLocation, false, [object Float32Array])</code></p></li><li><p><code>WAENING: WebGL content on the page might have caused the graphics card to reset</code></p></li></ul></li><li><p>原因分析：WebGL使用了计算机的图形硬件，而这部分资源是被操作系统管理，由包括浏览器在内的多个应用程序共享。如果一个程序接管了图形硬件，或者操作系统进入休眠，浏览器就会失去使用这些资源的权力，并导致存储在硬件中的数据丢失。在这种情况下，WebGL绘图上下文就会丢失。</p></li></ul><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="通过-v-show-opcity-visibility-或者离屏渲染等方式频繁切换显示隐藏-3d-场景" tabindex="-1">通过 <code>v-show</code>, <code>opcity</code>, <code>visibility</code> 或者离屏渲染等方式频繁切换显示隐藏 3D 场景 <a class="header-anchor" href="#通过-v-show-opcity-visibility-或者离屏渲染等方式频繁切换显示隐藏-3d-场景" aria-label="Permalink to &quot;通过 \`v-show\`, \`opcity\`, \`visibility\` 或者离屏渲染等方式频繁切换显示隐藏 3D 场景&quot;">​</a></h3><h3 id="webgl-提供供了两个事件来表示这种情况" tabindex="-1">webGL 提供供了两个事件来表示这种情况: <a class="header-anchor" href="#webgl-提供供了两个事件来表示这种情况" aria-label="Permalink to &quot;webGL 提供供了两个事件来表示这种情况:&quot;">​</a></h3><ul><li><p>上下文丢失时触发: webglcontextlost</p></li><li><p>上下文恢复事件: webglcontextrestored</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gl.canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;webglcontextlost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    location.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="主动销毁-3d-相关对象和内存释放" tabindex="-1">主动销毁 3D 相关对象和内存释放 <a class="header-anchor" href="#主动销毁-3d-相关对象和内存释放" aria-label="Permalink to &quot;主动销毁 3D 相关对象和内存释放&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onBeforeUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buildingModel)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buildingModelWire)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scene.remove.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene, scene.children)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forceContextLoss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderer.content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cancelAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animationID.value)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderer.domElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Model&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WEBGL_lose_context&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loseContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><blockquote><p>webGL 上下文是一个相对复杂的对象，一旦 webGL 上下文丢失，它就无法再使用，因此必须在丢失事件发生时及时释放所有相关资源并重新创建一个新的 webGL 上下文。所以要时刻关注 webGL 上下文对象并主动释放内存，防止内存泄露和 webGL 上下文丢失。</p></blockquote>`,17),t=[l];function h(p,k,r,E,d,o){return a(),i("div",null,t)}const y=s(n,[["render",h]]);export{g as __pageData,y as default};
