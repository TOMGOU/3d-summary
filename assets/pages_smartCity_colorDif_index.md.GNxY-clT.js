import{_ as s,c as i,o as a,V as e}from"./chunks/framework.V-t2EA2A.js";const g=JSON.parse('{"title":"深度排序问题","description":"","frontmatter":{},"headers":[],"relativePath":"pages/smartCity/colorDif/index.md","filePath":"pages/smartCity/colorDif/index.md"}'),t={name:"pages/smartCity/colorDif/index.md"},h=e(`<h1 id="深度排序问题" tabindex="-1">深度排序问题 <a class="header-anchor" href="#深度排序问题" aria-label="Permalink to &quot;深度排序问题&quot;">​</a></h1><blockquote><p>两个半透明的物体交织在一起的时候，由于深度排序问题，不同的角度看到的颜色差异较大。</p></blockquote><h2 id="解决方案一-使用不透明材质" tabindex="-1">解决方案一：使用不透明材质 <a class="header-anchor" href="#解决方案一-使用不透明材质" aria-label="Permalink to &quot;解决方案一：使用不透明材质&quot;">​</a></h2><blockquote><p>不透明材质不具有透明度，只显示自身颜色，而不受背景颜色的影响。要使用不透明材质，可以将材质的 <code>transparent</code> 属性设置为 false。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MeshBasicMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transparent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="解决方案二-将背景颜色设置为与物体颜色相同的颜色" tabindex="-1">解决方案二：将背景颜色设置为与物体颜色相同的颜色 <a class="header-anchor" href="#解决方案二-将背景颜色设置为与物体颜色相同的颜色" aria-label="Permalink to &quot;解决方案二：将背景颜色设置为与物体颜色相同的颜色&quot;">​</a></h2><blockquote><p>将背景颜色设置为与物体颜色相同的颜色，可以使物体的颜色看起来像是“挖空”了背景颜色，从而达到只显示物体颜色的效果。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebGLRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setClearColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="解决方案三-使用深度测试" tabindex="-1">解决方案三：使用深度测试 <a class="header-anchor" href="#解决方案三-使用深度测试" aria-label="Permalink to &quot;解决方案三：使用深度测试&quot;">​</a></h2><blockquote><p>深度测试可以确保只有物体前面的像素才会被渲染，从而使物体的颜色看起来像是“遮挡”了背景颜色。要使用深度测试，可以将材质的 <code>depthTest</code> 属性设置为 true，同时设置 <code>depthWrite</code> 属性为 true。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MeshBasicMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  depthTest: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  depthWrite: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>特别注意：此方案会形成黑色的背景块，需要使用方案四中的 <code>alphaTest</code> 属性来解决这个问题。</li></ul><h2 id="解决方案四-使用-alphatest-属性-控制渲染时丢弃透明度低于特定值的像素。" tabindex="-1">解决方案四：使用 <code>alphaTest</code> 属性，控制渲染时丢弃透明度低于特定值的像素。 <a class="header-anchor" href="#解决方案四-使用-alphatest-属性-控制渲染时丢弃透明度低于特定值的像素。" aria-label="Permalink to &quot;解决方案四：使用 \`alphaTest\` 属性，控制渲染时丢弃透明度低于特定值的像素。&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MeshBasicMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transparent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  alphaTest: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  depthTest: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  depthWrite: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="原理解析" tabindex="-1">原理解析 <a class="header-anchor" href="#原理解析" aria-label="Permalink to &quot;原理解析&quot;">​</a></h2><h3 id="三个关键属性的解析" tabindex="-1">三个关键属性的解析： <a class="header-anchor" href="#三个关键属性的解析" aria-label="Permalink to &quot;三个关键属性的解析：&quot;">​</a></h3><ul><li><p><code>depthTest</code>: 深度测试属性。深度测试会根据场景中物体的距离来确定哪个物体在前面哪个物体在后面。开启深度测试可以避免绘制被遮挡的像素，从而提高渲染性能。当 depthTest 属性为 true 时，将使用 OpenGL 深度测试（即 z-buffering）算法来决定像素的可见性。</p></li><li><p><code>depthWrite</code>: 深度写入属性。深度写入会将像素的深度信息写入深度缓冲区，以便进行深度测试。当 <code>depthWrite</code> 属性为 false 时，将禁止写入深度缓冲区，这意味着所有的像素都将被视为在场景中最靠近摄像机的物体，并且可能会覆盖其他物体。一般情况下，深度写入应该启用（即 <code>depthWrite</code> 设为 true）。</p></li><li><p><code>alphaTest</code>: alpha 测试属性。alpha 测试会根据像素的 alpha 值来判断像素是否可见。当 <code>alphaTest</code> 属性大于等于 0 且小于 1 时，将使用 alpha 测试算法来决定像素的可见性。例如，当 <code>alphaTest</code> 属性为 0.5 时，只有像素的 alpha 值大于等于 0.5 时才会被视为可见像素，否则会被视为不可见像素。这个属性可以用于解决透明物体的渲染问题，例如在渲染玻璃、水面等透明物体时，可以将 <code>alphaTest</code> 属性设置为透明度阈值，以避免渲染过度的像素。</p></li></ul><p>材质的 <code>depthTest</code> 属性为 true，表示开启深度测试。<code>depthWrite</code> 属性也为 true，表示允许写入深度缓冲区。<code>alphaTest</code> 属性为 0.2，表示只有像素的 alpha 值大于等于 0.2 时才会被视为可见像素，这样可以避免过度渲染半透明的像素。</p><h3 id="现象一-黑色背景块" tabindex="-1">现象一：黑色背景块 <a class="header-anchor" href="#现象一-黑色背景块" aria-label="Permalink to &quot;现象一：黑色背景块&quot;">​</a></h3><blockquote><p>{ depthTest: true, depthWrite: true }，有黑色背景块，半透明的像素被过度渲染。</p></blockquote><h3 id="现象二-色差明显" tabindex="-1">现象二：色差明显 <a class="header-anchor" href="#现象二-色差明显" aria-label="Permalink to &quot;现象二：色差明显&quot;">​</a></h3><blockquote><p>{ depthTest: true, depthWrite: false }，禁止将像素的深度信息写入深度缓冲区，导致渲染引擎无法识别哪个半透明物体离相机近。</p></blockquote>`,22),l=[h];function n(p,k,r,d,o,c){return a(),i("div",null,l)}const y=s(t,[["render",n]]);export{g as __pageData,y as default};
