import{_ as s,c as i,o as a,V as t}from"./chunks/framework.dnpgIXFM.js";const o=JSON.parse('{"title":"鼠标事件监听","description":"","frontmatter":{},"headers":[],"relativePath":"pages/cesium/event/index.md","filePath":"pages/cesium/event/index.md"}'),n={name:"pages/cesium/event/index.md"},e=t(`<h1 id="鼠标事件监听" tabindex="-1">鼠标事件监听 <a class="header-anchor" href="#鼠标事件监听" aria-label="Permalink to &quot;鼠标事件监听&quot;">​</a></h1><blockquote><p>类似于 three.js 的 Raycaster 3D 鼠标事件，cesium 也有自己特有的鼠标事件监听器。</p></blockquote><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ScreenSpaceEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewer.scene.canvas);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInputAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">movement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   获取鼠标的坐标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cartesian</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewer.camera.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pickEllipsoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      movement.endPosition,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      viewer.scene.globe.ellipsoid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cartesian) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   转换成经纬度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cartographic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.Cartographic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCartesian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cartesian);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> longitudeString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDegrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cartographic.longitude</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> latitudeString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDegrees</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cartographic.latitude</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> heightString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cartographic.height;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //   显示经纬度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`经度：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">longitudeString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 纬度：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">latitudeString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} 高度：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heightString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, Cesium.ScreenSpaceEventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOUSE_MOVE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h2><ul><li><p>step-1: 创建一个 <code>ScreenSpaceEventHandler</code> 对象，并传入 <code>viewer.scene.canvas</code> 作为参数，这将绑定事件处理程序到 <code>Cesium</code> 的渲染画布。</p></li><li><p>step-2: 使用 <code>setInputAction</code> 方法来设置事件处理程序。它接受两个参数：一个回调函数和一个指定事件类型的常量。</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInputAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">movement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里编写处理鼠标移动事件的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, Cesium.ScreenSpaceEventType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MOUSE_MOVE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>step-3: 编写回调函数，可以通过movement.endPosition获取鼠标当前的屏幕坐标。然后，使用viewer.camera.pickEllipsoid方法将屏幕坐标转换为地球上的笛卡尔坐标。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cartesian</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewer.camera.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pickEllipsoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    movement.endPosition,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewer.scene.globe.ellipsoid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span></code></pre></div><ul><li>step-4: <code>ScreenSpaceEventType</code> 常量</li></ul><table><thead><tr><th>姓名</th><th>描述</th></tr></thead><tbody><tr><td>LEFT_DOWN</td><td>表示鼠标左键按下事件。</td></tr><tr><td>LEFT_UP</td><td>代表鼠标左键按下事件。</td></tr><tr><td>LEFT_CLICK</td><td>代表鼠标左键单击事件。</td></tr><tr><td>LEFT_DOUBLE_CLICK</td><td>代表鼠标左键双击事件。</td></tr><tr><td>RIGHT_DOWN</td><td>表示鼠标左键按下事件。</td></tr><tr><td>RIGHT_UP</td><td>代表鼠标右键按下事件。</td></tr><tr><td>RIGHT_CLICK</td><td>代表鼠标右键单击事件。</td></tr><tr><td>MIDDLE_DOWN</td><td>表示鼠标中键按下事件。</td></tr><tr><td>MIDDLE_UP</td><td>代表鼠标中键弹起事件。</td></tr><tr><td>MIDDLE_CLICK</td><td>代表鼠标中键单击事​​件。</td></tr><tr><td>MOUSE_MOVE</td><td>代表鼠标移动事件。</td></tr><tr><td>WHEEL</td><td>代表鼠标滚轮事件。</td></tr><tr><td>PINCH_START</td><td>表示触摸表面上两指事件的开始。</td></tr><tr><td>PINCH_END</td><td>表示触摸表面上的两指事件的结束。</td></tr><tr><td>PINCH_MOVE</td><td>表示触摸表面上两指事件的变化。</td></tr></tbody></table>`,11),h=[e];function l(p,k,d,E,r,c){return a(),i("div",null,h)}const y=s(n,[["render",l]]);export{o as __pageData,y as default};
